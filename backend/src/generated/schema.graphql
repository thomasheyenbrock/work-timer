### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AuthPayload {
  token: String!
  user: User!
}

type Break {
  duration: Int
  id: ID!
}

scalar DateTime

type Mutation {
  createBreak(duration: Int, weekday: ID!): Break!
  createDraft(content: String, title: String!): Post!
  createWorkTime(end: DateTime, start: DateTime, weekday: ID!): WorkTime!
  deleteBreak(id: ID!): Break!
  deletePost(id: ID): Post
  deleteWorkTime(id: ID!): WorkTime!
  login(email: String!, password: String!): AuthPayload!
  publish(id: ID): Post
  signup(email: String!, name: String, password: String!): AuthPayload!
  updateBreak(duration: Int, id: ID!): Break!
  updateWorkTime(end: DateTime, id: ID!, start: DateTime): WorkTime!
}

type Post {
  author: User
  content: String
  id: ID!
  published: Boolean!
  title: String!
}

type Query {
  feed: [Post!]!
  filterPosts(searchString: String): [Post!]!
  me: User
  post(id: ID): Post
  weekDays(endDate: DateTime, startDate: DateTime): [Weekday!]!
}

type User {
  email: String!
  id: ID!
  name: String
  posts: [Post!]!
}

type Weekday {
  breaks(after: ID, before: ID, first: Int, last: Int, skip: Int): [Break!]!
  date: DateTime!
  id: ID!
  workTimes(after: ID, before: ID, first: Int, last: Int, skip: Int): [WorkTime!]!
}

type WorkTime {
  end: DateTime
  id: ID!
  start: DateTime
}
